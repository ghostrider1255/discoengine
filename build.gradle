buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.4.BUILD-SNAPSHOT")
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'com.palantir.docker' version '0.25.0'
}

apply plugin: 'java'
//apply plugin: 'org.springframework.boot'
apply plugin: io.spring.gradle.dependencymanagement.DependencyManagementPlugin
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: org.jfrog.gradle.plugin.artifactory.ArtifactoryPlugin

group 'DiscoEngine'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8


ext {
    springCloudVersion ='Hoxton.SR4'
    artifactName ='<artifact>'
    artifactory = 'http://localhost:8081/artifactory/'
    artifactoryRepo = 'gradle-lib-snashot'
    artifactoryRepo3pp = 'pub-gradle-remote'
    artifactoryUser = System.getProperty("user", "")
    artifactoryPassword = System.getProperty("password", "")
}

repositories {
    mavenCentral()
    maven {
        url "${artifactory}${artifactoryRepo3pp}"
        credentials {               // Optional resolver credentials (leave out to use anonymous resolution)
            username = "admin" // Artifactory user name
            password = "password" // Password or API Key
        }
    }

}

artifactory {
    contextUrl = "${artifactory}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = artifactoryRepo
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications ('mavenJava')
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

bootJar  {
    manifest {
        attributes('Main-Class': 'com.javasree.disco.DiscEngine',
                "Implementation-Title": project.name,
                "Build-Date": new Date(),
                "Created-By": System.getProperty('user.name'),
                "Gradle-Version": gradle.gradleVersion,
                "Java-Version": System.getProperty('java.version'))
    }
    //from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client',
            'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact bootJar

//            groupId 'discoengine'
//            artifactId artifactName
//            version '1.0-SNAPSHOT'

            from components.java
        }
    }
    repositories {
        maven { url "${artifactory}${artifactoryRepo}" }
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


docker {
    name 'localhost:5000/${project.name}:${project.version}'
    files tasks.bootJar.outputs
    //tag 'localhost:5000/${project.name}:${project.version}'
    dockerfile file('Dockerfile')
    //buildArgs([HOST_APP_JAR_LOC: 'version'])
}


//artifactoryPublish {
//    skip = false //Skip build info analysis and publishing (false by default)
//    contextUrl = ${artifactory}
//    //publications ('a','b','c')
//    //properties = ['qa.level': 'basic', 'q.os': 'win32, deb, osx']
//    //properties {
//      //  c '**:**:**:*@*', cProperty: 'only in c'
//    //}
//    clientConfig.publisher.repoKey = ${artifactoryRepo}
//    clientConfig.publisher.username = 'admin'
//    clientConfig.publisher.password = 'password'
//}